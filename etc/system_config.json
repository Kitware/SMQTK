// Comments are allowed in JSON files used with the SMQTK system. They are
// parsed out using the smqtk.utils.jsmin module.
{
    "DataSets": {
        // name: {
        //     "type": <class name from get_data_set_impls()>,
        //     "init": {
        //         kwargs to pass to constructor
        //     }
        // }
        "example_image": {
            "type": "DataFileSet",
            "init": {
                "root_directory": "FileDataSets/example_image/data",
                // Tells implementation to interpret relative paths to the
                // DATA_DIR variable as configured in smqtk_config module.
                "data_relative": 1
            }
        },
        "example_video": {
            "type": "DataFileSet",
            "init": {
                "root_directory": "FileDataSets/example_video/data",
                "data_relative": 1
            }
        }
    },

    "DescriptorElementFactories": {
        // For a list of available descriptor types, see the
        // smqtk.data_rep.descriptor_element_impl module.
        //
        // ``init`` block should not specify type_str or uuid construction
        // parameters.

        // Memory-based descriptor storage
        "MemoryDescriptorFactory": {
            "type": "DescriptorMemoryElement",
            "init": {
                // No initialization parameters for this factory, simply stores
                // vectors in local RAM.
                //
                // Other descriptor implementation construction parameters,
                // i.e. parameters other than the type string and UUID, should
                // be set here.
            }
        },

        // File-based descriptor storage
        "LocalDiskFactory": {
            "type": "DescriptorFileElement",
            "init": {
                "save_dir": "LocalDescriptors",
                // Tells implementation to interpret relative paths to the
                // WORK_DIR variable as configured in smqtk_config module.
                "work_relative": 1
            }
        },

        "LocalSolrFactory": {
            "type": "SolrDescriptorElement",
            "init": {
                "solr_conn_addr": "http://localhost:8983/solr",
                "type_field": "type_s",
                "uuid_field": "uuid_s",
                "vector_field": "descriptor_fs",
                "timestamp_field": "timestamp_f",
                "persistent_connection": 0
            }
        }
    },

    "DetectorsAndDescriptors": {
        "CD_CSIFT_Image_example": {
            "type": "ColorDetectAndDescribe_Image_csift",
            "init": {
                "work_directory": "/Users/jonathanowens/smqtk_benchmarking/detect_and_describe_csift"
            }
        }
    },

    "Quantization": {
        "SKLearn_Cluster_MiniBatch_Kmeans": {
            "type": "SKLearn_Cluster_MiniBatch_Kmeans",
            "init": {
                "work_dir": "/Users/jonathanowens/smqtk_benchmarking/quantization/kmeans/example_image",
                "kmeans_k": 256,
                "label": "labeslsl",
                // "init_size": 768,
                "random_seed": 42,
                "verbose": true,
                "compute_labels": false,
                "quantization_filepath": "/Users/jonathanowens/smqtk_benchmarking/quantization/example_image"
            }
        }
    },

    "SimilarityNN": {
        "FLANN": {
            "type": "FlannSimilarity",
            "init": {
                "random_seed": 42,
                "checkpoint_dir": "/Users/jonathanowens/smqtk_benchmarking/snn/example_image"
            }
        }
    },

    // Deprecated -- kept here for running old version of pipeline
    "ContentDescriptors": {
        // "name": {
        //     "type": "typeName",
        //     "init": {
        //         "kwargs": "here"
        //     }
        // }
        "CD_CSIFT_Image_example": {
            "type": "ColorDescriptor_Image_csift",
            "init": {
                // This impl allows relative paths, to be interpreted relative
                // to system DATA_DIR / WORK_DIR respectively.
//                "descriptor_type_str": "csift",
                "model_directory": "/Users/jonathanowens/smqtk_benchmarking/original_smqtk/ColorDescriptor/csift/example_image",
                "work_directory": "/Users/jonathanowens/smqtk_benchmarking/original_smqtk/ColorDescriptor/csift/example_image",
                "random_seed": 42,
                // model generation parameters
                "kmeans_k": 256
            }
        },
        "CD_CSIFT_Image_example_spatial": {
            "type": "ColorDescriptor_Image_csift",
            "init": {
                // This impl allows relative paths, to be interpreted relative
                // to system DATA_DIR / WORK_DIR respectively.
                "descriptor_type_str": "csift",
                "model_directory": "ContentDescriptors/ColorDescriptor/csift/example_image",
                "work_directory": "ContentDescriptors/ColorDescriptor/csift/example_image",
                "random_seed": 42,
                // model generation parameters
                "kmeans_k": 256,
                "use_spatial_pyramid": 1
            }
        },
        "CD_RGSIFT_Image_example": {
            "type": "ColorDescriptor_rgsift",
            "init": {
                // This impl allows relative paths, to be interpreted relative
                // to system DATA_DIR / WORK_DIR respectively.
                "descriptor_type_str": "rgsift",
//                "model_directory": "ContentDescriptors/ColorDescriptor/rgsift/example_image",
                "work_dir": "ContentDescriptors/ColorDescriptor/rgsift/example_image",
                "random_seed": 42,
                // model generation parameters
                "kmeans_k": 256
            }
        },
        "CD_CSIFT_Video_example": {
            "type": "ColorDescriptor_Video_csift",
            "init": {
                // This impl allows relative paths, to be interpreted relative
                // to system DATA_DIR / WORK_DIR respectively.
                "model_directory": "ContentDescriptors/ColorDescriptor/csift/example_video",
                "work_directory": "ContentDescriptors/ColorDescriptor/csift/example_video",
                "random_seed": 42,
                // model generation parameters
                "kmeans_k": 512
            }
        },
        "OpenCV_Surf": {
            "type": "OpenCV_Desc",
            "init": {
                "open_cv_detector_type": "SURF",
                "open_cv_descriptor_type": "SURF"
            }
        }
    },

    "Indexers": {
        // For the moment, indexers carry a model that is data-set specific
        // (contains all descriptors from data in that set with UUID references
        // to that data). This will hopefully change to the more independent
        // side of things in the future.
        "SVM_HIK-CD_CSIFT-Image": {
            // Model trained using CD_CSIFT_Image_example descriptors
            // Indexes over example_image data set
            "type": "SVMIndexerHIK",
            "init": {
                "data_dir": "Indexers/SVM_HIK/cd_csift/example_image"
            }
        },
        "SVM_HIK-CD_RGSIFT-Image": {
            // Model trained using CD_RGSIFT_Image_example descriptors
            // Indexes over example_image data set
            "type": "SVMIndexerHIK",
            "init": {
                "data_dir": "Indexers/SVM_HIK/cd_rgsift/example_image"
            }
        },
        "SVM_HIK-CD_CSIFT-Video": {
            // Model trained using CD_CSIFT_Video_example descriptors
            // Indexes over example_video data set
            "type": "SVMIndexerHIK",
            "init": {
                "data_dir": "Indexers/SVM_HIK/cd_csift/example_video"
            }
        }
    },

    "LSHCodeIndices": {
        "MemoryIndex": {
            "type": "MemoryCodeIndex",
            "init": {
                // None
            }
        }
    }
}

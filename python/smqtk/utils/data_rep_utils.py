__author__ = "jonathan.owens"

"""
This is a collection of utility functions designed to ease the conversion between SMTQK's internal data representation 
and other ways to represent data, such as numpy.
"""

def npy_array_to_descriptor_element_md5(data_element_type, descriptor_element_factory, name, data):
	"""
	Convert a numpy array to a descriptor_element of type generated by descriptor_element_factory using md5 (generated 
		via building an intermediate data_element of type data_element_type).

	:param data_element_type: A constructor for the type of data element to use in the intermediate builidng of this 
		descriptor element. This is an easy way to comput the md5 sum.
	:type data_element_type: data_element_impl

	:param descriptor_element_factory: A factory for building the desired descriptor_element type.
	:type descriptor_element_factory: descriptor_element_factory

	:param name: Name of descriptor.
	:type name: str 

	:param data: Data you want to embed in the descriptor_element.
	:type data: numpy.core.multiarray.ndarray

	:return: A descriptor element with data as its vector and the associated md5 generated from building a data element 
		with data of data_element_type, as well as the intermediate data_element.
	:rtype: descriptor_element
	"""
	descriptor_data_element = data_element_type(data, "numpy_array")
	descriptor_element = descriptor_element_factory.new_descriptor(name, descriptor_data_element.md5())
	descriptor_element.set_vector(data)

	return descriptor_element, descriptor_data_element

def iterable_npy_array_to_iterable_desc_elem_md5(data_element_type, descriptor_element_factory, name, data):
	desc_iterable = []

	for d in data:
		desc_elem, _ = npy_array_to_descriptor_element_md5(data_element_type, descriptor_element_factory, name, d)
		desc_iterable.append(desc_elem)

	return desc_iterable
